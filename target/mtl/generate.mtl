[comment encoding = UTF-8 /]
[module generate('http://www.eclipse.org/emf/2002/Ecore')]

[template public generateElement (e : EPackage, entryPoint : String, fileName : String, languageName : String, uri : String, modelName : String)]
[comment @main/]
[file (fileName, false, 'UTF-8')]
grammar [languageName/] with org.eclipse.xtext.common.Terminals hidden(WS, ML_COMMENT, SL_COMMENT)
generate [modelName/] "[uri/]"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore


[comment process EClass entry point/]
[if (isSupertypeOfSomething(getEClass(e, entryPoint) , e))]
	[comment if entry point is a supertye/]
	[handleSupertypeEClass(getEClass(e, entryPoint))/]
[else]
	[comment if entry point is "simple"/]
	[handleEClass(getEClass(e, entryPoint))/]
[/if]

[comment process interface/abstract EClass/]
[handleInterfaceOrAbstract(e)/]

[comment process supertypes/]
[handleSupertypes(e, entryPoint)/]

[comment cycle through all the EClass that are NOT interfaces/abstract/entry point/supertypes /]
[for (c : EClass | getPureEClasses(e, entryPoint))]
	[if c.name <> 'EObject']
		[handleEClass(c)/]
	[/if]
[/for]

[handleTypes(e)/]

[handleEnum(e)/]

[comment default rule for EObject data type as it is not detected in handleTypes(e)/]
[comment this is currently handled by a workaround in EcoreToWebEditor otherwise it leads to 
		 "java.lang.RuntimeException: No GenPackage for NsURI http://www.eclipse.org/emf/2002/Ecore"
		 during compile, please check
		 https://www.eclipse.org/forums/index.php/m/1771782
		 https://github.com/eclipse/xtext-core/issues/41  
/]

[comment if there is not an EClass named 'EObject' handle it as a Type/]
[if (thereIsEClass(e, 'EObject'))]
	[handleEClass(getEClass(e, 'EObject'))/]
[else]
	EObject returns ecore::EObject:
		{ecore::EObject}
		'EObject';
[/if]

[/file]
[/template]

[comment generates the rule for the signle EClass/]
[template public handleEClass(c : EClass)]

[c.name/] returns [c.name/]:
	{[c.name/]}
	'[c.name/]'

	'{'
	[handleAttributes(c)/]
	[handleRelations(c)/]
	[handleCompositions(c)/]
	'}';

[/template]

[comment generates the sub-rules for interfaces/abstract EClasses/]
[template public handleInterfaceOrAbstract (e : EPackage)]

	[comment cycle through interfaces/abstract EClasses/]
	[for (interface : EClass | getAllInterfaceOrAbstract(e))]

		[interface.oclAsType(EClass).name/] returns [interface.oclAsType(EClass).name/]:
		[for (class : EClass | getSons(interface.oclAsType(EClass), e)) separator('|')] [class.name/] [/for];

	[/for]
[/template]

[comment generates the sub-rules for supertype EClasses/]
[template public handleSupertypes (e : EPackage, entryPoint : String)]
	
	[comment cycle through all valid EClasses (all but entry point and interfaces/abstract)/]
	[for (s : EClass | getOtherEClasses(e, entryPoint))]
		[comment if the current EClass is supertype of something/]
		[if (isSupertypeOfSomething(s, e))]
			[comment handle it using the same paradigm as interfaces, plus handle the new EClass <name>_Impl/]
			[s.name/] returns [s.name/]:
			[s.name/]_Impl | [for (son : EClass | getSons(s, e)) separator('|')] [son.name/] [/for];

		[handleSupertypeEClass(s)/]		

		[/if]
		
	[/for]

[/template]

[comment generates the sub-rules for the supertype EClass/]
[template public handleSupertypeEClass (c : EClass)]
	[c.name/]_Impl returns [c.name/]:
	{[c.name/]}
	'[c.name/]'

	'{'
	[handleAttributes(c)/]
	[handleRelations(c)/]
	[handleCompositions(c)/]
	'}';
[/template]


[comment given an EClass generates the sub-rules for the attributes/]
[template public handleAttributes(c : EClass)]
[for (a : EAttribute | c.eAllAttributes)]
	[comment cannot handle EEnumerator typed attributes as it leads to "The attribute '<attributeName>' is not transient so it must have a data type that is serializable"/]
	[if (a.eType.name <> 'EEnumerator')]
		('[a.name/]' '=' [if (a.upperBound > 1 or a.upperBound = -1)] '{' [a.name/]+=[a.eType.name/] ( "," [a.name/]+=[a.eType.name/])* '}' [else] [a.name/] = [a.eType.name/] [/if])?
	[/if]
[/for]
[/template]

[comment given an EClass generates the sub-rules for the EClass relations (compositions are ignored)/]
[template public handleRelations(c : EClass)]

[for (r: EReference | c.eAllReferences)]
	[comment if it is not a composition/]
	[if (r.containment = false)]
		[if (r.upperBound = 1)]
			('[r.name/]' '(' [r.name/] = ['['/][r.eReferenceType.name/]|STRING[']'/] ')')?
		[else] 
			('[r.name/]' '(' [r.name/] += ['['/][r.eReferenceType.name/]|STRING[']'/] ( "," [r.name/] += ['['/][r.eReferenceType.name/]|STRING[']'/])* ')' )?
		[/if]
	[/if]
[/for]
[/template]

[comment given an EClass generates the sub-rules for the EClass compositions/]
[template public handleCompositions(c : EClass)]
[for (c: EReference | c.eAllContainments)]
	[if (c.upperBound = 1)]
		('[c.name/]' ':' '{' [c.name/]=[c.eReferenceType.name/] '}' )[if (c.lowerBound = 0)]?[/if] 
	[else]
		('[c.name/]' ':' '{' [c.name/]+=[c.eReferenceType.name/] ( "," [c.name/]+=[c.eReferenceType.name/])* '}' )[if (c.lowerBound = 0)]?[/if]
	[/if]
[/for]
[/template]

[comment generates the sub-rules for the Enums/]
[template public handleEnum(e : EPackage)]

[for (enum : EEnum | getAllEnums(e))]
	enum [enum.name/] returns [enum.name/]:
		[for (l : EEnumLiteral | getAllEliterals(enum)) separator('|')] [l.name/] = '[l.name/]' [/for];
[/for]
[/template]

[comment query that returns the EClass with name = name/]
[query public getEClass (e : EPackage, name : String) : EClass =
	e.eClassifiers
			-> filter(EClass)
			-> select(c : EClass |  (c.name = name))
			-> any(true)
/]

[comment returns True if there is an EClass with name = name/]
[query public thereIsEClass (e : EPackage, name : String) : Boolean = 
	e.eClassifiers
			-> filter(EClass)
			-> select(c : EClass | (c.name = name))
			-> asSet()
			-> size() > 0
/]

[comment query that returns a set of all the EClass that are NOT interfaces/abstract/entry point /]
[query public getOtherEClasses (e : EPackage, entryPoint : String) : Set(EClass) =
	e.eClassifiers
			-> filter(EClass)
			-> select(c : EClass |  ( (c.name <> entryPoint) and (not(c.abstract or c.interface))))
			-> asSet()
/]

[comment query that returns a set of all the EClass that are NOT interfaces/abstract/entry point/supertypes /]
[query public getPureEClasses (e : EPackage, entryPoint : String) : Set(EClass) =
	e.eClassifiers
			-> filter(EClass)
			-> select(c : EClass |  ( (c.name <> entryPoint) and (not(c.abstract or c.interface)) and (not (isSupertypeOfSomething(c, e)))))
			-> asSet()
/]

[comment query that returns a set of all the data types used in the metamodel/]
[query public getTypes (e : EPackage) : Set(EDataType) =
	e.eClassifiers
			-> filter(EClass)
			-> collect(c : EClass | c.eAllAttributes
			-> collect(t : EAttribute | t.eType))
			-> asSet()
/]

[comment query that returns a set of all the "sons" of an interface/abstract EClass/]
[query public getSons (i : EClass, e : EPackage) : Set(EClass) =
	e.eClassifiers
			-> filter(EClass)
			-> select(c : EClass | (not (c.interface or c.abstract)))
			-> select(c2 : EClass | i.isSuperTypeOf(c2) and (i.name <> c2.name))
			-> asSet()
/]

[comment query that returns a set of all the interfaces/abstract EClasses of the EPackage/]
[query public getAllInterfaceOrAbstract (e : EPackage) : Set(EClass) =
	e.eClassifiers
			-> filter(EClass)
			-> select(c : EClass |  (c.interface or c.abstract))
			-> asSet()
/]

[comment query that returns true if the given EClass is supertype of some EClass/]
[query public isSupertypeOfSomething (s : EClass, e : EPackage) : Boolean =
	getSons(s, e)->size() > 0
/]

[comment query that returns all the EEnums/]
[query public getAllEnums (e : EPackage) : Set(EEnum) =
	e.eClassifiers
			-> filter(EEnum)
			-> asSet()
/]

[comment query that returns all the Eliterals of an Enum EClass/]
[query public getAllEliterals (e : EEnum) : Set(EEnumLiteral) =
	e.eLiterals->asSet()
/]

[comment generates the rules relative to data types/]
[template public handleTypes(e : EPackage)]
[for (t : EDataType | getTypes(e))]

	[comment EEnum are handled in handleEnum/]
	[if not (t.oclIsTypeOf(EEnum))]
		
		[if (t.name = 'EString')]
	
			EString returns ecore::EString:
				STRING | ID;
	
		[elseif (t.name = 'EInt')]
	
			EInt returns ecore::EInt:
				'-'? INT;
	
		[elseif (t.name = 'EBoolean')]
	
			EBoolean returns ecore::EBoolean:
				'true' | 'false';
	
		[elseif (t.name = 'EBigDecimal')]
	
			EBigDecimal returns ecore::EBigDecimal:
				INT? '.' INT;
		
		[elseif (t.name = 'EBigInteger')]
	
			EBigInteger returns ecore::EBigInteger:
				'-'? INT;
	
		[elseif (t.name = 'EBooleanObject')]
	
			EBooleanObject returns ecore::EBooleanObject:
				'true' | 'false';
	
		[elseif (t.name = 'EByte')]
	
			EByte returns ecore::EByte:
				'-'? INT;
	
		[elseif (t.name = 'EByteObject')]
	
			EByteObject returns ecore::EByteObject:
				'-'? INT;
	
		[elseif (t.name = 'EChar')]
	
			EChar returns ecore::EChar:
				'-'? INT;
	
		[elseif (t.name = 'EDouble')]
	
			EDouble returns ecore::EDouble:
				'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	
		[elseif (t.name = 'EDoubleObject')]
	
			EDoubleObject returns ecore::EDoubleObject:
				'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	
		[elseif (t.name = 'EFloat')]
	
			EFloat returns ecore::EFloat:
				'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	
		[elseif (t.name = 'EFloatObject')]
	
			EFloatObject returns ecore::EFloatObject:
				'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	
		[elseif (t.name = 'EIntegerObject')]
	
			EIntegerObject returns ecore::EIntegerObject:
				'-'? INT;
	
		[elseif (t.name = 'ELong')]
	
			ELong returns ecore::ELong:
				'-'? INT;
	
		[elseif (t.name = 'ELongObject')]
	
			ELongObject returns ecore::ELongObject:
				'-'? INT;
	
		[elseif (t.name = 'EShort')]
	
			EShort returns ecore::EShort:
				'-'? INT;
	
		[elseif (t.name = 'EShortObject')]
	
			EShortObject returns ecore::EShortObject:
				'-'? INT;
	
		[elseif (t.name = 'GenDecoration')]
	
			enum GenDecoration returns genmodel::GenDecoration:
				None = 'None' | Manual = 'Manual' | Live = 'Live';
	
		[elseif (t.name = 'GenDelegationKind')]
	
			enum GenDelegationKind returns genmodel::GenDelegationKind:
				None = 'None' | Reflective = 'Reflective' | Virtual = 'Virtual' | Dynamic = 'Dynamic';
	
		[elseif (t.name = 'GenJDKLevel')]
	
			enum GenJDKLevel returns genmodel::GenJDKLevel:
				JDK14 = 'JDK14' | JDK50 = 'JDK50' | JDK60 = 'JDK60' | JDK70 = 'JDK70' | JDK80 = 'JDK80';
	
		[elseif (t.name = 'GenPropertyKind')]
	
			enum GenPropertyKind returns genmodel::GenPropertyKind:
				Editable = 'Editable' | Readonly = 'Readonly' | None = 'None';
	
		[elseif (t.name = 'GenProviderKind')]
	
			enum GenProviderKind returns genmodel::GenProviderKind:
				Singleton = 'Singleton' | Stateful = 'Stateful' | None = 'None';
	
		[elseif (t.name = 'GenResourceKind')]
	
			enum GenResourceKind returns genmodel::GenResourceKind:
				None = 'None' | Basic = 'Basic' | XMI = 'XMI' | XML = 'XML';
	
		[elseif (t.name = 'GenRuntimePlatform')]
	
			enum GenRuntimePlatform returns genmodel::GenRuntimePlatform:
				IDE = 'IDE' | RCP = 'RCP' | RAP = 'RAP' | GWT = 'GWT';
	
		[elseif (t.name = 'GenRuntimeVersion')]
	
			enum GenRuntimeVersion returns genmodel::GenRuntimeVersion:
				EMF22 = 'EMF22' | EMF23 = 'EMF23' | EMF24 = 'EMF24' | EMF25 = 'EMF25' | EMF26 = 'EMF26' | EMF27 = 'EMF27' | EMF28 = 'EMF28' | EMF29 = 'EMF29' | EMF210 = 'EMF210' | EMF211 = 'EMF211' | EMF212 = 'EMF212' | EMF213 = 'EMF213';
		
		[comment not supported data types/]
	
		[elseif (t.name = 'EByteArray')]
	
			EByteArray returns ecore::EByteArray:
				'EByteArray' /* TODO: implement this rule and an appropriate IValueConverter */;
		
		[elseif (t.name = 'EJavaClass')]
	
			EJavaClass returns ecore::EJavaClass:
				'EJavaClass' /* TODO: implement this rule and an appropriate IValueConverter */;
	
		[elseif (t.name = 'EJavaObject')]
	
			EJavaObject returns ecore::EJavaObject:
				'EJavaObject' /* TODO: implement this rule and an appropriate IValueConverter */;
	
		[elseif (t.name = 'ECharacterObject')]
	
			ECharacterObject returns ecore::ECharacterObject:
				'ECharacterObject' /* TODO: implement this rule and an appropriate IValueConverter */;
	
		[elseif (t.name = 'EDate')]
	
			EDate returns ecore::EDate:
				'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;
	
		[comment last-resort parametric handler/]
	
		[else]

		// TODO: re-implement [t.name/] type rule below as it probably not generated correctly
		[t.name/] returns ecore::[t.name/]:
			'[t.name/]';
		[/if]
	[/if]
[/for]
[/template]
